<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace: 名称空间; 指定为接口的全类名
    id: 唯一标识
    resultType: 返回值类型
    #{id}: 从传递过来的参数中取出id值
 -->

<mapper namespace="com.sour.mybatis.dao.EmployeeMapper">

<!--
    使用二级缓存
        eviction: 缓存的回收策略  (默认的是 LRU)
            LRU –  最近最少使用的：移除最长时间不被使用的对象。
            FIFO –  先进先出：按对象进入缓存的顺序来移除它们。
            SOFT –  软引用：移除基于垃圾回收器状态和软引用规则的对象。
            WEAK –  弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        flushInterval: 缓存刷新间隔 (默认不清空)
            多久清空一次
        readOnly: 是否只读 (默认false)
            true: 从缓存获取的数据都是只读操作
                    为了加快速度, 直接就会将引用交给用户 (速度快, 不安全)
            false: 可被修改 (因为会序列化, 所以要实现Serializable接口)
                    会利用序列化和反序列化的技术克隆一份新的给你  (安全, 不快)
        size: 缓存多少元素
        type: 指定自定义缓存的全类名 (需要实现Cache接口)

-->
    <cache eviction="LRU" flushInterval="5000" readOnly="false" size="1000" />

    <!--    使用全类名-->
<!--    <select id="getEmployeeById" resultType="com.sour.mybatis.bean.Employee">-->
<!--
    使用别名
    databaseId: 配置的数据源类型, 可以在配置文件xml里面查看  databaseId="mysql"
-->
    <select id="getEmployeeById" resultType="employee" >
        select * from employee where id = #{id}
    </select>

    <select id="getEmployeeByIdAndLastName" resultType="com.sour.mybatis.bean.Employee">
        select * from employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmployeeByMap" resultType="com.sour.mybatis.bean.Employee">
            select * from employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmployeeByPojg" resultType="com.sour.mybatis.bean.Employee">
            select * from employee where id = #{id} and last_name = #{lastName}
    </select>

<!--    返回集合-->
    <select id="getEmployeesByLastNameLike" resultType="com.sour.mybatis.bean.Employee">
            select * from employee where last_name like #{lastName}
    </select>

<!--    返回Map-->
    <select id="getReturnMap" resultType="java.util.Map">
            select * from employee where id = #{id}
    </select>

<!--    Map<主键, Employee> -->
    <select id="getReturnMapByLastNameLike" resultType="java.util.Map">
        select * from employee where last_name like #{lastName}
    </select>


    <select id="getByDeptId" resultType="com.sour.mybatis.bean.Employee">
        SELECT * FROM employee WHERE dept_id = #{deptId}
    </select>

    <!--
        parameterType: 参数类型, 可以省略
        获取自增主键值:
            mysql支持自增主键, 自增主键的获取, myBatis也是利用useGeneratedKeys
            useGeneratedKeys="true":  使用自增主键获取主键值策略
            keyProperty: 指定对应的主键属性, 也就是mybatis获取到主键值后, 将这个值赋值给javaBean的哪个属性
    -->
    <insert id="addEmployee" parameterType="com.sour.mybatis.bean.Employee" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `employee`(`last_name`, `gender`, `email`)
         VALUES (#{lastName}, #{gender}, #{email});
    </insert>


    <update id="updateEmployee">
        UPDATE employee SET `last_name` = #{lastName}, `gender` = #{gender}, `email` = #{email} WHERE `id` = #{id};
    </update>

    <delete id="deleteEmployee">
        delete from employee where id = #{id}
    </delete>



</mapper>